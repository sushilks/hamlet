// Copyright 2019 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.2
// source: federated_service.proto

package v1alpha2

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// FederatedService represents a federated service which can be discovered by
// a federated service mesh consumer.
type FederatedService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The unique name that identifies the service within a federated
	// service mesh owner.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The description of the federated service.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Informative values for filtering purposes.
	Tags []string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty"`
	// Informative KV pairs for filtering purposes.
	Labels map[string]string `protobuf:"bytes,4,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// REQUIRED. The FQDN (Fully Qualified Domain Name) uniquely identifies the
	// federated service. The FQDN is used by consumer platforms as a DNS name to
	// access the imported FederatedService. The consumer platform DNS can be
	// programmed to reference the Ingress of the imported FederatedService.
	Fqdn string `protobuf:"bytes,5,opt,name=fqdn,proto3" json:"fqdn,omitempty"`
	// REQUIRED. The service mesh ingress endpoints that provide access to the
	// federated service.
	Endpoints []*FederatedService_Endpoint `protobuf:"bytes,9,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// REQUIRED. A list of SANs (Subject Alternative Names) to enable end-to-end
	// security for the federated service.
	Sans []string `protobuf:"bytes,10,rep,name=sans,proto3" json:"sans,omitempty"`
	// REQUIRED. The service instances corresponding to the federated service.
	Instances []*FederatedService_Instance `protobuf:"bytes,11,rep,name=instances,proto3" json:"instances,omitempty"`
}

func (x *FederatedService) Reset() {
	*x = FederatedService{}
	if protoimpl.UnsafeEnabled {
		mi := &file_federated_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederatedService) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederatedService) ProtoMessage() {}

func (x *FederatedService) ProtoReflect() protoreflect.Message {
	mi := &file_federated_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederatedService.ProtoReflect.Descriptor instead.
func (*FederatedService) Descriptor() ([]byte, []int) {
	return file_federated_service_proto_rawDescGZIP(), []int{0}
}

func (x *FederatedService) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FederatedService) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *FederatedService) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *FederatedService) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *FederatedService) GetFqdn() string {
	if x != nil {
		return x.Fqdn
	}
	return ""
}

func (x *FederatedService) GetEndpoints() []*FederatedService_Endpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *FederatedService) GetSans() []string {
	if x != nil {
		return x.Sans
	}
	return nil
}

func (x *FederatedService) GetInstances() []*FederatedService_Instance {
	if x != nil {
		return x.Instances
	}
	return nil
}

// Endpoint represents a service mesh ingress endpoint that provides access to
// a federated service over mTLS (mutual TLS).
type FederatedService_Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The service mesh ingress endpoint address (i.e. IP, CIDR, or a
	// domain name).
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// REQUIRED. The port exposed by the service mesh ingress endpoint.
	Port uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// REQUIRED. The endpoint labels decouple IP from routing information. The
	// endpoint_selector field in Instance matches with at least one endpoint
	// label here.
	Labels []string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty"`
}

func (x *FederatedService_Endpoint) Reset() {
	*x = FederatedService_Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_federated_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederatedService_Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederatedService_Endpoint) ProtoMessage() {}

func (x *FederatedService_Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_federated_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederatedService_Endpoint.ProtoReflect.Descriptor instead.
func (*FederatedService_Endpoint) Descriptor() ([]byte, []int) {
	return file_federated_service_proto_rawDescGZIP(), []int{0, 1}
}

func (x *FederatedService_Endpoint) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FederatedService_Endpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FederatedService_Endpoint) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

// Instance represents an instance of the federated service.
type FederatedService_Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The unique identifier for the federated service instance within
	// the group of instances for a FederatedService.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// REQUIRED. The protocol corresponding to the federated service instance.
	//
	// E.g. In the case where protocol is TLS, the connection will be routed
	// based on the SNI header to the destination.
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	// Additional metadata for the purpose of establishing connectivity.
	//
	// E.g. In the case where protocol is TLS, the connection will be routed
	// based on the SNI header to the destination. The SNI header can be made
	// available in the metadata using a key named 'sni'.
	Metadata map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// REQUIRED. A list of endpoint labels to match over Endpoint instances in a
	// FederatedService. At least one matching label must be provided.
	EndpointSelector []string `protobuf:"bytes,4,rep,name=endpoint_selector,json=endpointSelector,proto3" json:"endpoint_selector,omitempty"`
}

func (x *FederatedService_Instance) Reset() {
	*x = FederatedService_Instance{}
	if protoimpl.UnsafeEnabled {
		mi := &file_federated_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FederatedService_Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FederatedService_Instance) ProtoMessage() {}

func (x *FederatedService_Instance) ProtoReflect() protoreflect.Message {
	mi := &file_federated_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FederatedService_Instance.ProtoReflect.Descriptor instead.
func (*FederatedService_Instance) Descriptor() ([]byte, []int) {
	return file_federated_service_proto_rawDescGZIP(), []int{0, 2}
}

func (x *FederatedService_Instance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *FederatedService_Instance) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *FederatedService_Instance) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *FederatedService_Instance) GetEndpointSelector() []string {
	if x != nil {
		return x.EndpointSelector
	}
	return nil
}

var File_federated_service_proto protoreflect.FileDescriptor

var file_federated_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x66, 0x65, 0x64, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x32, 0x22, 0xb3, 0x06, 0x0a, 0x10, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x4f, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x66, 0x71, 0x64, 0x6e, 0x12, 0x52, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x73, 0x61, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6e, 0x73,
	0x12, 0x52, 0x0a, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e,
	0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x50, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x1a, 0x80, 0x02, 0x0a, 0x08, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x5e, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66,
	0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x46, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x07, 0x10, 0x08,
	0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x52, 0x02, 0x69, 0x64, 0x52, 0x03, 0x73, 0x61, 0x6e, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x42, 0x10, 0x5a, 0x0e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_federated_service_proto_rawDescOnce sync.Once
	file_federated_service_proto_rawDescData = file_federated_service_proto_rawDesc
)

func file_federated_service_proto_rawDescGZIP() []byte {
	file_federated_service_proto_rawDescOnce.Do(func() {
		file_federated_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_federated_service_proto_rawDescData)
	})
	return file_federated_service_proto_rawDescData
}

var file_federated_service_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_federated_service_proto_goTypes = []interface{}{
	(*FederatedService)(nil),          // 0: federation.types.v1alpha2.FederatedService
	nil,                               // 1: federation.types.v1alpha2.FederatedService.LabelsEntry
	(*FederatedService_Endpoint)(nil), // 2: federation.types.v1alpha2.FederatedService.Endpoint
	(*FederatedService_Instance)(nil), // 3: federation.types.v1alpha2.FederatedService.Instance
	nil,                               // 4: federation.types.v1alpha2.FederatedService.Instance.MetadataEntry
}
var file_federated_service_proto_depIdxs = []int32{
	1, // 0: federation.types.v1alpha2.FederatedService.labels:type_name -> federation.types.v1alpha2.FederatedService.LabelsEntry
	2, // 1: federation.types.v1alpha2.FederatedService.endpoints:type_name -> federation.types.v1alpha2.FederatedService.Endpoint
	3, // 2: federation.types.v1alpha2.FederatedService.instances:type_name -> federation.types.v1alpha2.FederatedService.Instance
	4, // 3: federation.types.v1alpha2.FederatedService.Instance.metadata:type_name -> federation.types.v1alpha2.FederatedService.Instance.MetadataEntry
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_federated_service_proto_init() }
func file_federated_service_proto_init() {
	if File_federated_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_federated_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederatedService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_federated_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederatedService_Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_federated_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FederatedService_Instance); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_federated_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_federated_service_proto_goTypes,
		DependencyIndexes: file_federated_service_proto_depIdxs,
		MessageInfos:      file_federated_service_proto_msgTypes,
	}.Build()
	File_federated_service_proto = out.File
	file_federated_service_proto_rawDesc = nil
	file_federated_service_proto_goTypes = nil
	file_federated_service_proto_depIdxs = nil
}
