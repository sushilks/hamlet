// Copyright 2019 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.2
// source: resource_discovery.proto

package v1alpha2

import (
	context "context"
	any "github.com/golang/protobuf/ptypes/any"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Operation defines the set of possible operations that can be performed in
// relation to a resource.
type StreamResponse_Operation int32

const (
	// Specifies an unknown operation.
	StreamResponse_UNKNOWN StreamResponse_Operation = 0
	// Specifies a create operation.
	StreamResponse_UPSERT StreamResponse_Operation = 1
	// Specifies a delete operation.
	StreamResponse_DELETE StreamResponse_Operation = 2
)

// Enum value maps for StreamResponse_Operation.
var (
	StreamResponse_Operation_name = map[int32]string{
		0: "UNKNOWN",
		1: "UPSERT",
		2: "DELETE",
	}
	StreamResponse_Operation_value = map[string]int32{
		"UNKNOWN": 0,
		"UPSERT":  1,
		"DELETE":  2,
	}
)

func (x StreamResponse_Operation) Enum() *StreamResponse_Operation {
	p := new(StreamResponse_Operation)
	*p = x
	return p
}

func (x StreamResponse_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamResponse_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_resource_discovery_proto_enumTypes[0].Descriptor()
}

func (StreamResponse_Operation) Type() protoreflect.EnumType {
	return &file_resource_discovery_proto_enumTypes[0]
}

func (x StreamResponse_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamResponse_Operation.Descriptor instead.
func (StreamResponse_Operation) EnumDescriptor() ([]byte, []int) {
	return file_resource_discovery_proto_rawDescGZIP(), []int{1, 0}
}

// StreamRequest represents a streaming request sent by a federated service mesh
// consumer to a federated service mesh owner.
//
// Following are some of the valid field combinations for a StreamRequest.
//
// * Initial request:
//     resource_url   != ""
//     response_nonce == ""
//     status         == nil
//
// * ACK, request:
//     resource_url   != ""
//     response_nonce != ""
//     status         != nil
//       code         == OK
//       message      == ""
//
// * NACK, request:
//     resource_url   != ""
//     response_nonce != ""
//     status         != nil
//       code         != OK
//       message      != ""
type StreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The type URL of the resource being requested.
	// Example: "type.googleapis.com/federation.types.v1alpha2.FederatedService"
	ResourceUrl string `protobuf:"bytes,1,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	// The nonce of a consumed StreamResponse to ACK/NACK. This field should be
	// omitted in the first StreamRequest sent by the federated service mesh
	// consumer.
	ResponseNonce string `protobuf:"bytes,2,opt,name=response_nonce,json=responseNonce,proto3" json:"response_nonce,omitempty"`
	// The message consumption status of the client. This field should be omitted
	// in the first StreamRequest sent by the federated service mesh consumer. If
	// the message is consumed successfully, the status code should be set to OK.
	// If there is a failure in consuming a message, an appropriate status code
	// must be set along with the error details in the status' message field.
	Status *status.Status `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// context which will be used for coorelation between req/response
	// on first call the context will be set and will be returned with all responses.
	// on future response as ack the same context will be used.
	Context string `protobuf:"bytes,4,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_discovery_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_resource_discovery_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_resource_discovery_proto_rawDescGZIP(), []int{0}
}

func (x *StreamRequest) GetResourceUrl() string {
	if x != nil {
		return x.ResourceUrl
	}
	return ""
}

func (x *StreamRequest) GetResponseNonce() string {
	if x != nil {
		return x.ResponseNonce
	}
	return ""
}

func (x *StreamRequest) GetStatus() *status.Status {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *StreamRequest) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

// StreamResponse represents a streaming response sent by a federated service
// mesh owner to a federated service mesh consumer.
type StreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The unique identifier for a StreamResponse.
	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
	// REQUIRED. The type URL of the resource being returned in the response.
	// Example: "type.googleapis.com/federation.types.v1alpha2.FederatedService"
	ResourceUrl string `protobuf:"bytes,2,opt,name=resource_url,json=resourceUrl,proto3" json:"resource_url,omitempty"`
	// REQUIRED. The typed resource in relation to which an operation is to be
	// performed.
	ResourceId string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// REQUIRED. The typed resource in relation to which an operation is to be
	// performed.
	Resource *any.Any `protobuf:"bytes,4,opt,name=resource,proto3" json:"resource,omitempty"`
	// REQUIRED. The operation to be performed in relation to the resource.
	Operation StreamResponse_Operation `protobuf:"varint,5,opt,name=operation,proto3,enum=federation.resourcediscovery.v1alpha2.StreamResponse_Operation" json:"operation,omitempty"`
	// this is the context that was send in the initials request call
	Context string `protobuf:"bytes,6,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *StreamResponse) Reset() {
	*x = StreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_discovery_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamResponse) ProtoMessage() {}

func (x *StreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_resource_discovery_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamResponse.ProtoReflect.Descriptor instead.
func (*StreamResponse) Descriptor() ([]byte, []int) {
	return file_resource_discovery_proto_rawDescGZIP(), []int{1}
}

func (x *StreamResponse) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *StreamResponse) GetResourceUrl() string {
	if x != nil {
		return x.ResourceUrl
	}
	return ""
}

func (x *StreamResponse) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *StreamResponse) GetResource() *any.Any {
	if x != nil {
		return x.Resource
	}
	return nil
}

func (x *StreamResponse) GetOperation() StreamResponse_Operation {
	if x != nil {
		return x.Operation
	}
	return StreamResponse_UNKNOWN
}

func (x *StreamResponse) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type BidirectionalStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Request  *StreamRequest  `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	Response *StreamResponse `protobuf:"bytes,2,opt,name=response,proto3" json:"response,omitempty"`
}

func (x *BidirectionalStream) Reset() {
	*x = BidirectionalStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_resource_discovery_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BidirectionalStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BidirectionalStream) ProtoMessage() {}

func (x *BidirectionalStream) ProtoReflect() protoreflect.Message {
	mi := &file_resource_discovery_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BidirectionalStream.ProtoReflect.Descriptor instead.
func (*BidirectionalStream) Descriptor() ([]byte, []int) {
	return file_resource_discovery_proto_rawDescGZIP(), []int{2}
}

func (x *BidirectionalStream) GetRequest() *StreamRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *BidirectionalStream) GetResponse() *StreamResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

var File_resource_discovery_proto protoreflect.FileDescriptor

var file_resource_discovery_proto_rawDesc = []byte{
	0x0a, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc7, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x66, 0x65, 0x64, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22,
	0x30, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x53,
	0x45, 0x52, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x02, 0x22, 0xb8, 0x01, 0x0a, 0x13, 0x42, 0x69, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x4e, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x64,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x66, 0x65,
	0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x32, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xa2, 0x01, 0x0a,
	0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x8d, 0x01, 0x0a, 0x0f, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3a, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x69,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x1a, 0x3a, 0x2e, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x2e, 0x42, 0x69, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x28, 0x01, 0x30,
	0x01, 0x42, 0x1c, 0x5a, 0x1a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x32, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_resource_discovery_proto_rawDescOnce sync.Once
	file_resource_discovery_proto_rawDescData = file_resource_discovery_proto_rawDesc
)

func file_resource_discovery_proto_rawDescGZIP() []byte {
	file_resource_discovery_proto_rawDescOnce.Do(func() {
		file_resource_discovery_proto_rawDescData = protoimpl.X.CompressGZIP(file_resource_discovery_proto_rawDescData)
	})
	return file_resource_discovery_proto_rawDescData
}

var file_resource_discovery_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_resource_discovery_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_resource_discovery_proto_goTypes = []interface{}{
	(StreamResponse_Operation)(0), // 0: federation.resourcediscovery.v1alpha2.StreamResponse.Operation
	(*StreamRequest)(nil),         // 1: federation.resourcediscovery.v1alpha2.StreamRequest
	(*StreamResponse)(nil),        // 2: federation.resourcediscovery.v1alpha2.StreamResponse
	(*BidirectionalStream)(nil),   // 3: federation.resourcediscovery.v1alpha2.BidirectionalStream
	(*status.Status)(nil),         // 4: google.rpc.Status
	(*any.Any)(nil),               // 5: google.protobuf.Any
}
var file_resource_discovery_proto_depIdxs = []int32{
	4, // 0: federation.resourcediscovery.v1alpha2.StreamRequest.status:type_name -> google.rpc.Status
	5, // 1: federation.resourcediscovery.v1alpha2.StreamResponse.resource:type_name -> google.protobuf.Any
	0, // 2: federation.resourcediscovery.v1alpha2.StreamResponse.operation:type_name -> federation.resourcediscovery.v1alpha2.StreamResponse.Operation
	1, // 3: federation.resourcediscovery.v1alpha2.BidirectionalStream.request:type_name -> federation.resourcediscovery.v1alpha2.StreamRequest
	2, // 4: federation.resourcediscovery.v1alpha2.BidirectionalStream.response:type_name -> federation.resourcediscovery.v1alpha2.StreamResponse
	3, // 5: federation.resourcediscovery.v1alpha2.DiscoveryService.EstablishStream:input_type -> federation.resourcediscovery.v1alpha2.BidirectionalStream
	3, // 6: federation.resourcediscovery.v1alpha2.DiscoveryService.EstablishStream:output_type -> federation.resourcediscovery.v1alpha2.BidirectionalStream
	6, // [6:7] is the sub-list for method output_type
	5, // [5:6] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_resource_discovery_proto_init() }
func file_resource_discovery_proto_init() {
	if File_resource_discovery_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_resource_discovery_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_discovery_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_resource_discovery_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BidirectionalStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_resource_discovery_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_resource_discovery_proto_goTypes,
		DependencyIndexes: file_resource_discovery_proto_depIdxs,
		EnumInfos:         file_resource_discovery_proto_enumTypes,
		MessageInfos:      file_resource_discovery_proto_msgTypes,
	}.Build()
	File_resource_discovery_proto = out.File
	file_resource_discovery_proto_rawDesc = nil
	file_resource_discovery_proto_goTypes = nil
	file_resource_discovery_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DiscoveryServiceClient is the client API for DiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DiscoveryServiceClient interface {
	// Establish a new stream with a federated service mesh owner. The federated
	// service mesh owner can then send StreamResponse messages, and the federated
	// service mesh consumer can ACK/NACK these via new StreamRequest messages.
	EstablishStream(ctx context.Context, opts ...grpc.CallOption) (DiscoveryService_EstablishStreamClient, error)
}

type discoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDiscoveryServiceClient(cc grpc.ClientConnInterface) DiscoveryServiceClient {
	return &discoveryServiceClient{cc}
}

func (c *discoveryServiceClient) EstablishStream(ctx context.Context, opts ...grpc.CallOption) (DiscoveryService_EstablishStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DiscoveryService_serviceDesc.Streams[0], "/federation.resourcediscovery.v1alpha2.DiscoveryService/EstablishStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &discoveryServiceEstablishStreamClient{stream}
	return x, nil
}

type DiscoveryService_EstablishStreamClient interface {
	Send(*BidirectionalStream) error
	Recv() (*BidirectionalStream, error)
	grpc.ClientStream
}

type discoveryServiceEstablishStreamClient struct {
	grpc.ClientStream
}

func (x *discoveryServiceEstablishStreamClient) Send(m *BidirectionalStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *discoveryServiceEstablishStreamClient) Recv() (*BidirectionalStream, error) {
	m := new(BidirectionalStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DiscoveryServiceServer is the server API for DiscoveryService service.
type DiscoveryServiceServer interface {
	// Establish a new stream with a federated service mesh owner. The federated
	// service mesh owner can then send StreamResponse messages, and the federated
	// service mesh consumer can ACK/NACK these via new StreamRequest messages.
	EstablishStream(DiscoveryService_EstablishStreamServer) error
}

// UnimplementedDiscoveryServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDiscoveryServiceServer struct {
}

func (*UnimplementedDiscoveryServiceServer) EstablishStream(DiscoveryService_EstablishStreamServer) error {
	return status1.Errorf(codes.Unimplemented, "method EstablishStream not implemented")
}

func RegisterDiscoveryServiceServer(s *grpc.Server, srv DiscoveryServiceServer) {
	s.RegisterService(&_DiscoveryService_serviceDesc, srv)
}

func _DiscoveryService_EstablishStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DiscoveryServiceServer).EstablishStream(&discoveryServiceEstablishStreamServer{stream})
}

type DiscoveryService_EstablishStreamServer interface {
	Send(*BidirectionalStream) error
	Recv() (*BidirectionalStream, error)
	grpc.ServerStream
}

type discoveryServiceEstablishStreamServer struct {
	grpc.ServerStream
}

func (x *discoveryServiceEstablishStreamServer) Send(m *BidirectionalStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *discoveryServiceEstablishStreamServer) Recv() (*BidirectionalStream, error) {
	m := new(BidirectionalStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _DiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "federation.resourcediscovery.v1alpha2.DiscoveryService",
	HandlerType: (*DiscoveryServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EstablishStream",
			Handler:       _DiscoveryService_EstablishStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "resource_discovery.proto",
}
