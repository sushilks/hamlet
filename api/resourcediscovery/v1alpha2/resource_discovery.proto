// Copyright 2019 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/rpc/status.proto";

package federation.resourcediscovery.v1alpha2;

option go_package = "resourcediscovery/v1alpha2";

// StreamRequest represents a streaming request sent by a federated service mesh
// consumer to a federated service mesh owner.
//
// Following are some of the valid field combinations for a StreamRequest.
//
// * Initial request:
//     resource_url   != ""
//     response_nonce == ""
//     status         == nil
//
// * ACK, request:
//     resource_url   != ""
//     response_nonce != ""
//     status         != nil
//       code         == OK
//       message      == ""
//
// * NACK, request:
//     resource_url   != ""
//     response_nonce != ""
//     status         != nil
//       code         != OK
//       message      != ""
message StreamRequest {
  // REQUIRED. The type URL of the resource being requested.
  // Example: "type.googleapis.com/federation.types.v1alpha2.FederatedService"
  string resource_url = 1;

  // The nonce of a consumed StreamResponse to ACK/NACK. This field should be
  // omitted in the first StreamRequest sent by the federated service mesh
  // consumer.
  string response_nonce = 2;

  // The message consumption status of the client. This field should be omitted
  // in the first StreamRequest sent by the federated service mesh consumer. If
  // the message is consumed successfully, the status code should be set to OK.
  // If there is a failure in consuming a message, an appropriate status code
  // must be set along with the error details in the status' message field.
  google.rpc.Status status = 3;

  // context which will be used for coorelation between req/response
  // on first call the context will be set and will be returned with all responses.
  // on future response as ack the same context will be used.
  string context = 4;
}

// StreamResponse represents a streaming response sent by a federated service
// mesh owner to a federated service mesh consumer.
message StreamResponse {
  // REQUIRED. The unique identifier for a StreamResponse.
  string nonce = 1;

  // REQUIRED. The type URL of the resource being returned in the response.
  // Example: "type.googleapis.com/federation.types.v1alpha2.FederatedService"
  string resource_url = 2;

  // REQUIRED. The typed resource in relation to which an operation is to be
  // performed.
  string resource_id = 3;

  // REQUIRED. The typed resource in relation to which an operation is to be
  // performed.
  google.protobuf.Any resource = 4;

  // Operation defines the set of possible operations that can be performed in
  // relation to a resource.
  enum Operation {
    // Specifies an unknown operation.
    UNKNOWN = 0;

    // Specifies a create operation.
    UPSERT = 1;

    // Specifies a delete operation.
    DELETE = 2;
  }

  // REQUIRED. The operation to be performed in relation to the resource.
  Operation operation = 5;

  // this is the context that was send in the initials request call
  string context = 6;
}
message BidirectionalStream {
  StreamRequest request = 1;
  StreamResponse response = 2 ;
}

// DiscoveryService represents the API implemented by a federated service mesh
// owner.
service DiscoveryService {
  // Establish a new stream with a federated service mesh owner. The federated
  // service mesh owner can then send StreamResponse messages, and the federated
  // service mesh consumer can ACK/NACK these via new StreamRequest messages.
  rpc EstablishStream (stream BidirectionalStream) returns (stream BidirectionalStream);
}
